#!/usr/bin/env node


var config  = require('../config');              // get our config file

/**
 * Verify environment (local, dev, prod)
 */
if (!process.env.NODE_ENV) {
  console.log("No env specified: try 'NODE_ENV=local' on npm start");
  process.exit(1);
}

/**
 * Module dependencies.
 */


var app     = require('../app');
var http    = require('http');
var debug   = require('debug')('goneGamer:server');

/**
 * Get port from environment and store in Express.
 */

var port    = normalizePort(process.env.PORT || config.port ||  '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server  = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Attach socket to server
 */

var io = app.io;
io.attach(server);

/**
 * Tips
 */

console.log("NODE_ENV = "+app.get('env'));

console.log("\nStarting points:");

console.log("-- pages --");
console.log("http://localhost:"+port+"/");
console.log("http://localhost:"+port+"/newGame");
console.log("\n");

console.log("-- admin pages --");
console.log("http://localhost:"+port+"/admin/getUsers");
console.log("\n");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
